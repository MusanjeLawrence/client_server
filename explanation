

Server:

java

import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

This line imports the socket module and creates a new socket object using the socket.socket method. The socket method creates a new socket object, and the two arguments passed to it specify the address (AF_INET) and the type (SOCK_STREAM) of the socket. AF_INET refers to the address (hostname) format and SOCK_STREAM specifies that the socket is a stream socket, which is a type of socket that provides a reliable, stream-oriented connection.

python

server_socket.bind(("localhost", 4444))

This line uses the bind method to bind the socket to a specific address and port. In this case, it's bound to the address "localhost" and port 4444. "localhost" refers to the local host, which is the machine the code is running on. The bind method is used to associate the socket with a specific network address.

scss

server_socket.listen(1)

This line uses the listen method to make the socket listen for incoming connections. The argument 1 specifies the maximum number of queued connections.

scss

client_socket, address = server_socket.accept()
print("Connected by", address)

This line uses the accept method to accept an incoming connection. The accept method returns a new socket object that is used to communicate with the client. The address variable holds the address of the client that connected to the server. The print statement outputs the message "Connected by" followed by the client's address.

kotlin

while True:
    data = client_socket.recv(1024).decode()
    if not data:
        break
    print("Message from client:", data)
    if data == "Bye.":
        break

This while loop uses the recv method to receive data from the client. The argument 1024 specifies the maximum number of bytes to be received at once. The decode method is used to decode the received data from a byte string to a string. The if not data statement checks if there is any data received, and if there is no data, it breaks out of the loop. The print statement outputs the message "Message from client:" followed by the received data. The if data == "Bye." statement checks if the received data is equal to "Bye.", and if it is, it breaks out of the loop.

go

client_socket.close()
server_socket.close()

These lines use the close method to close the client and server sockets.

Client:

java

import socket

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(("localhost", 4444))

This code is similar to the server-side code, but instead of creating a server socket, it creates a client socket. The connect method is used to connect the client socket to the server's address and port.
